Source: golang-github-mwitkow-go-conntrack
Maintainer: Debian Go Packaging Team <pkg-go-maintainers@lists.alioth.debian.org>
Uploaders: Mart√≠n Ferrari <tincho@debian.org>,
Section: devel
Testsuite: autopkgtest-pkg-go
Priority: optional
Build-Depends: debhelper (>= 10~),
               dh-golang,
               golang-any,
               golang-github-prometheus-client-golang-dev,
               golang-github-stretchr-testify-dev,
               golang-golang-x-net-dev,
Standards-Version: 4.1.5
Vcs-Browser: https://salsa.debian.org/go-team/packages/golang-github-mwitkow-go-conntrack
Vcs-Git: https://salsa.debian.org/go-team/packages/golang-github-mwitkow-go-conntrack.git
Homepage: https://github.com/mwitkow/go-conntrack
XS-Go-Import-Path: github.com/mwitkow/go-conntrack

Package: golang-github-mwitkow-go-conntrack-dev
Architecture: all
Depends: golang-github-prometheus-client-golang-dev,
         golang-github-stretchr-testify-dev,
         golang-golang-x-net-dev,
         ${misc:Depends},
         ${shlibs:Depends},
Description: Go middleware for net.Conn tracking
 Prometheus (https://prometheus.io/) monitoring and x/net/trace
 (https://godoc.org/golang.org/x/net/trace#EventLog) tracing wrappers for
 net.Conn, both inbound (net.Listener) and outbound (net.Dialer).
 .
 Go standard library does a great job of doing "the right" things with
 your connections: http.Transport pools outbound ones, and http.Server
 sets good Keep Alive defaults.  However, it is still easy to get it
 wrong.
 .
 That's why you should be able to monitor (using Prometheus) how many
 connections your Go frontend servers have inbound, and how big are the
 connection pools to your backends. You should also be able to inspect
 your connection without ssh and netstat.
